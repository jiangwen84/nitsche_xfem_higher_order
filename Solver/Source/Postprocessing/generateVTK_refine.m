function[] = generateVTK_refine(ELEM,NODE,VERT,VERT_ELE,PARAMS,disp)


fprintf('*************************************************************************** \n')
fprintf('                         Post-processing\n')
fprintf('*************************************************************************** \n')


%%%%
%%%% Bulk Mesh
%%%%

plotFileBulk = [PARAMS.plotPath PARAMS.plotFileBase '_bulk.vtk'];

pFilB = fopen(plotFileBulk,'w','l');
%% Header
fprintf(pFilB,'# vtk DataFile Version 2.0\n');
fprintf(pFilB,'Bulk mesh generated by generateVTK.m\n');
fprintf(pFilB,'ASCII\nDATASET UNSTRUCTURED_GRID\n\n');

%% Mesh
% cutElm = sort([ELEM.siblings]);
% Nodal coordinates
cutElm = zeros(length(ELEM),1);
ice = 0;
num_int_nodes = 0;
for e=1:length(ELEM)
    if(~isempty(ELEM(e).siblings))
        ice = ice+1;
        cutElm(ice,1) = e;
        num_int_nodes = num_int_nodes + length(unique(ELEM(e).vertices));
    end
end
cutElm(ice+1:end) = [];
%num_plot_nodes = PARAMS.num_bg_nod + num_int_nodes;
num_plot_nodes = size(VERT_ELE,2) + num_int_nodes;

plot_nodes_coord = [];
plot_nodes_id3 = [];
plot_nodes_id4 = [];
num_nodes_per_ele = [];
nodes_count = 0;
% Connectivity table
vertCount = size(VERT_ELE,2);
plotNod = cell(1,length(ELEM));
for ie=1:length(ELEM)
    gNod = 0; % counters for ghost nodes
    pNodCoord = zeros(4,3);
    physicalNodeId = zeros(3,1);
    physNodeCount = 0;
    for in=1:length(ELEM(ie).vertices_ele)
        domain_ele = ELEM(ie).domain;
        ls_vert = VERT_ELE(ELEM(ie).vertices_ele(in)).ls;
        if(ls_vert>0.0)
            domain_vert = 2;
        else
            domain_vert = 1;
        end
        if(~isempty(ELEM(ie).vertices) && domain_ele~=domain_vert)
            if (gNod<length(unique(ELEM(ie).vertices)))
                locVert = unique(ELEM(ie).vertices);
                for iv=1:length(locVert)
                    gNod = gNod+1;
                    plotNod{ie} = [plotNod{ie} vertCount+1];
                    pNodCoord(length(plotNod{ie}),1)=VERT(locVert(iv)).X;
                    pNodCoord(length(plotNod{ie}),2)=VERT(locVert(iv)).Y;
                    vertCount = vertCount+1;
                end
            end
        else
            plotNod{ie} = [plotNod{ie} ELEM(ie).vertices_ele(in)];
            physNodeCount = physNodeCount + 1;
            physicalNodeId(physNodeCount) = length(plotNod{ie});
            pNodCoord(length(plotNod{ie}),1)=VERT_ELE(ELEM(ie).vertices_ele(in)).X;
            pNodCoord(length(plotNod{ie}),2)=VERT_ELE(ELEM(ie).vertices_ele(in)).Y;
        end
    end
    physicalNodeId(physNodeCount+1:end) = [];
    if(length(plotNod{ie})>3)
        K = convhull(pNodCoord(:,1),pNodCoord(:,2));
        if(length(K)-1~=length(plotNod{ie}))
            fprintf('WARNING: the physical portion of element %d is not convex\n',ie);
            if(length(physicalNodeId)~=1)
                err = MException('PhysNodChk:MoreThanOnce',...
                    'elem %d has a non-convex physical domain and length(parNodId) = %d',ie,length(physicalNodeId));
                throw(err);
            end
            vertInConvexHull = setdiff(K,physicalNodeId);
            vertOutConvexHull = setdiff([1 2 3 4],K);
            plotNod{ie} = plotNod{ie}([physicalNodeId vertInConvexHull(1) vertOutConvexHull vertInConvexHull(2)]);
        else
            plotNod{ie} = plotNod{ie}(K(1:(length(K)-1)));
        end
    end
    
    num_nodes = length(plotNod{ie});
    num_nodes_per_ele = [num_nodes_per_ele; num_nodes];
    plot_nodes_coord = [plot_nodes_coord; pNodCoord(1:num_nodes,1) pNodCoord(1:num_nodes,2) pNodCoord(1:num_nodes,3)];
        
    if (num_nodes == 3)
        plot_nodes_id3 = [plot_nodes_id3;nodes_count nodes_count+1 nodes_count+2];
        nodes_count = nodes_count+3;
    else
        K = convhull(pNodCoord(:,1),pNodCoord(:,2))-1+nodes_count;
        plot_nodes_id4 = [plot_nodes_id4;K(1:4)'];
        nodes_count = nodes_count+4;
    end
end

fprintf(pFilB,'POINTS %d float\n',length(plot_nodes_coord));

fprintf(pFilB,'%12.3e%12.3e%12.3e\n',plot_nodes_coord');

fprintf(pFilB,'\nCELLS %d %d\n',length(ELEM),length(ELEM) + length(plot_nodes_id4)*4 + length(plot_nodes_id3)*3);
elmType = zeros(length(ELEM),1);
count_3 = 1;
count_4 = 1;
for ie=1:length(ELEM)
    if(num_nodes_per_ele(ie)==3)
        fprintf(pFilB,'%10d',3);
        fprintf(pFilB,'%10d',plot_nodes_id3(count_3,:));
        elmType(ie) = 5;
        count_3 = count_3 + 1;
    else
        fprintf(pFilB,'%10d',4);
        fprintf(pFilB,'%10d',plot_nodes_id4(count_4,:));
        elmType(ie) = 9;
        count_4 = count_4 + 1;
    end
    fprintf(pFilB,'\n');
end

% Element type
fprintf(pFilB,'\nCELL_TYPES %d\n',length(ELEM));
for ie=1:length(elmType)
    fprintf(pFilB,'%4d\n',elmType(ie));
end
fprintf(pFilB,'\n');

%% Cell data
fprintf(pFilB,'CELL_DATA %d\n',length(ELEM));
fprintf(pFilB,'SCALARS domain int\nLOOKUP_TABLE default\n');
for ie=1:length(ELEM)
    fprintf(pFilB,'%4d\n',ELEM(ie).domain);
end

fprintf(pFilB,'\nSCALARS E float\nLOOKUP_TABLE default\n');
for ie=1:length(ELEM)
    fprintf(pFilB,'%12.3e\n',ELEM(ie).MatParam(1));
end

if(PARAMS.ndof==2)
    fprintf(pFilB,'\nSCALARS nu float\nLOOKUP_TABLE default\n');
    for ie=1:length(ELEM)
        fprintf(pFilB,'%12.3e\n',ELEM(ie).MatParam(2));
    end
end

[stress,vonMises] = getStress(ELEM,NODE,PARAMS,disp);

fprintf(pFilB,'\nSCALARS vonMisesStress float\nLOOKUP_TABLE default\n');
for ie=1:length(ELEM)
    fprintf(pFilB,'%12.3e\n',vonMises(ie));
end

if(PARAMS.ndof==2)
    fprintf(pFilB,'\nTENSORS stress float\n');
    for ie=1:length(ELEM)
        if(abs(stress(ie,1))>1e-16 && abs(stress(ie,3))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,1),stress(ie,3),0.0);
        elseif(abs(stress(ie,1))>1e-16 && abs(stress(ie,3))<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,1),0.0,0.0);
        elseif(abs(stress(ie,1))<1e-16 && abs(stress(ie,3))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,stress(ie,3),0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
        if(abs(stress(ie,3))>1e-16 && abs(stress(ie,2))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,3),stress(ie,2),0.0);
        elseif(abs(stress(ie,3))>1e-16 && abs(stress(ie,2))<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,3),0.0,0.0);
        elseif(abs(stress(ie,3))<1e-16 && abs(stress(ie,2))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,stress(ie,2),0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
        fprintf(pFilB,'%12.3e%12.3e%12.3e\n\n',0.0,0.0,0.0);
    end
else
    fprintf(pFilB,'\nVECTORS gradient float\n');
    for ie=1:length(ELEM)
        fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,1),stress(ie,2),0.0);
    end
end
fprintf(pFilB,'\n');

%% Point data
fprintf(pFilB,'POINT_DATA %d\n',length(plot_nodes_coord));
fprintf(pFilB,'VECTORS displacement float\n');

count = 1;
for ie=1:length(ELEM)
    locNod = [ELEM(ie).nodes];
    % Get the shape functions
    xe = [NODE(locNod).X]; ye = [NODE(locNod).Y];
    %Amat = [ 1 1 1; xe(1) xe(2) xe(3); ye(1) ye(2) ye(3)];
    
    for iv=1:num_nodes_per_ele(ie)
        % Evaluate the shape function at the vertex position
        %Npar = Amat\[1  plot_nodes_coord(count+iv-1,1) plot_nodes_coord(count+iv-1,2)]';
        [psi, eta] = inverse(plot_nodes_coord(count+iv-1,1),plot_nodes_coord(count+iv-1,2),xe,ye);
        
        n_in = 3;
        if(length(xe) == 3)
            Npar = [psi eta 1-psi-eta];
            n_in = 3;
        elseif(length(xe)==6)
            Npar = [2*psi^2-psi 2*eta^2-eta 2*psi^2+2*eta^2+4*psi*eta-3*psi-3*eta+1 4*psi*eta 4*eta*(1-psi-eta) 4*psi*(1-psi-eta)];
            n_in = 6;
        end
        
        disp_vert_X = 0.0; disp_vert_Y = 0.0;
        for in=1:n_in
            if(PARAMS.ndof==2)
                disp_vert_X = disp_vert_X + disp(2*locNod(in)-1)*Npar(in);
                disp_vert_Y = disp_vert_Y + disp(2*locNod(in))*Npar(in);
            elseif(PARAMS.ndof==1)
                disp_vert_X = disp_vert_X + disp(locNod(in))*Npar(in);
                disp_vert_Y = 0.0;
            end
        end
        if(abs(disp_vert_X)>1e-16 && abs(disp_vert_Y)>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp_vert_X,disp_vert_Y,0.0);
        elseif(abs(disp_vert_X)>1e-16 && abs(disp_vert_Y)<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp_vert_X,0.0,0.0);
        elseif(abs(disp_vert_X)<1e-16 && abs(disp_vert_Y)>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,disp_vert_Y,0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
    end
    count = count + num_nodes_per_ele(ie);
end

fclose(pFilB);
