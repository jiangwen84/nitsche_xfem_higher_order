function[] = generateVTK(ELEM,NODE,VERT,PARAMS,disp)

if((PARAMS.newton && PARAMS.iLoad==PARAMS.timeStepping(1)) || ~PARAMS.newton)
    fprintf('*************************************************************************** \n')
    fprintf('                         Post-processing\n')
    fprintf('*************************************************************************** \n')
end

%%%%
%%%% Bulk Mesh
%%%%
if(PARAMS.newton)
    plotFileBulk = [PARAMS.plotPath PARAMS.plotFileBase '_bulk_' num2str(PARAMS.iLoad) '.vtk'];
else
    plotFileBulk = [PARAMS.plotPath PARAMS.plotFileBase '_bulk.vtk'];
end
pFilB = fopen(plotFileBulk,'w','l');
%% Header
fprintf(pFilB,'# vtk DataFile Version 2.0\n');
fprintf(pFilB,'Bulk mesh generated by generateVTK.m\n');
fprintf(pFilB,'ASCII\nDATASET UNSTRUCTURED_GRID\n\n');

%% Mesh
% cutElm = sort([ELEM.siblings]);
% Nodal coordinates
cutElm = zeros(length(ELEM));
ice = 0;
num_int_nodes = 0;
for e=1:length(ELEM)
    if(~isempty(ELEM(e).siblings))
        ice = ice+1;
        cutElm(ice) = e;
        num_int_nodes = num_int_nodes + length(unique(ELEM(e).vertices));
    end
end
cutElm(ice+1:end) = [];
num_plot_nodes = PARAMS.num_bg_nod + num_int_nodes;
fprintf(pFilB,'POINTS %d float\n',num_plot_nodes);
for in=1:PARAMS.num_bg_nod
    fprintf(pFilB,'%12.3e%12.3e%12.3e\n',NODE(in).X,NODE(in).Y,0.0);
end
for ic=1:length(cutElm)
    locVert = unique(ELEM(cutElm(ic)).vertices);
    for iv=1:length(locVert)
        fprintf(pFilB,'%12.3e%12.3e%12.3e\n',VERT(locVert(iv)).X,VERT(locVert(iv)).Y,0.0);
    end
end
% Connectivity table
vertCount = PARAMS.num_bg_nod;
plotNod = cell(1,length(ELEM));
for ie=1:length(ELEM)
    gNod = 0; % counters for ghost nodes
    pNodCoord = zeros(4,3);
    physicalNodeId = zeros(3,1);
    physNodeCount = 0;
    for in=1:length(ELEM(ie).nodes)
        if(ELEM(ie).nodes(in) > PARAMS.num_bg_nod)
            if (gNod<length(unique(ELEM(ie).vertices)))
                locVert = unique(ELEM(ie).vertices);
                for iv=1:length(locVert)
                    gNod = gNod+1;
                    plotNod{ie} = [plotNod{ie} vertCount+1];
                    pNodCoord(length(plotNod{ie}),1)=VERT(locVert(iv)).X;
                    pNodCoord(length(plotNod{ie}),2)=VERT(locVert(iv)).Y;
                    vertCount = vertCount+1;
                end
            end
        else
            plotNod{ie} = [plotNod{ie} ELEM(ie).nodes(in)];
            physNodeCount = physNodeCount + 1;
            physicalNodeId(physNodeCount) = length(plotNod{ie});
            pNodCoord(length(plotNod{ie}),1)=NODE(ELEM(ie).nodes(in)).X;
            pNodCoord(length(plotNod{ie}),2)=NODE(ELEM(ie).nodes(in)).Y;
        end
    end
    physicalNodeId(physNodeCount+1:end) = [];
    if(length(plotNod{ie})>3)
        K = convhull(pNodCoord(:,1),pNodCoord(:,2));
        if(length(K)-1~=length(plotNod{ie}))
            fprintf('WARNING: the physical portion of element %d is not convex\n',ie);
            if(length(physicalNodeId)~=1)
                err = MException('PhysNodChk:MoreThanOnce',...
                    'elem %d has a non-convex physical domain and length(parNodId) = %d',ie,length(physicalNodeId));
                throw(err);
            end
            vertInConvexHull = setdiff(K,physicalNodeId);
            vertOutConvexHull = setdiff([1 2 3 4],K);
            plotNod{ie} = plotNod{ie}([physicalNodeId vertInConvexHull(1) vertOutConvexHull vertInConvexHull(2)]);
        else
            plotNod{ie} = plotNod{ie}(K(1:(length(K)-1)));
        end
    end
end
fprintf(pFilB,'\nCELLS %d %d\n',length(ELEM),length(ELEM)+length(cell2mat(plotNod)));
elmType = zeros(length(ELEM),1);
for ie=1:length(ELEM)
    fprintf(pFilB,'%10d',length(plotNod{ie}));
    for in=1:length(plotNod{ie})
        fprintf(pFilB,'%10d',plotNod{ie}(in)-1);
    end
    fprintf(pFilB,'\n');
    if(length(plotNod{ie})==3)
        elmType(ie)=5;
    elseif(length(plotNod{ie})==4)
        elmType(ie)=9;
    else
        elmType(ie)=7;
    end
end
% Element type
fprintf(pFilB,'\nCELL_TYPES %d\n',length(ELEM));
for ie=1:length(elmType)
    fprintf(pFilB,'%4d\n',elmType(ie));
end
fprintf(pFilB,'\n');

%% Cell data
fprintf(pFilB,'CELL_DATA %d\n',length(ELEM));
fprintf(pFilB,'SCALARS domain int\nLOOKUP_TABLE default\n');
for ie=1:length(ELEM)
    fprintf(pFilB,'%4d\n',ELEM(ie).domain);
end
fprintf(pFilB,'\nSCALARS material int\nLOOKUP_TABLE default\n');
for ie=1:length(ELEM)
    if(rem(ELEM(ie).domain,2)==0)
        fprintf(pFilB,'%4d\n',1);
    else
        fprintf(pFilB,'%4d\n',2);
    end
end
stress = getStress(ELEM,NODE,PARAMS,disp);
if(PARAMS.ndof==2)
    fprintf(pFilB,'\nTENSORS stress float\n');
    for ie=1:length(ELEM)
        if(abs(stress(ie,1))>1e-16 && abs(stress(ie,3))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,1),stress(ie,3),0.0);
        elseif(abs(stress(ie,1))>1e-16 && abs(stress(ie,3))<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,1),0.0,0.0);
        elseif(abs(stress(ie,1))<1e-16 && abs(stress(ie,3))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,stress(ie,3),0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
        if(abs(stress(ie,3))>1e-16 && abs(stress(ie,2))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,3),stress(ie,2),0.0);
        elseif(abs(stress(ie,3))>1e-16 && abs(stress(ie,2))<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,3),0.0,0.0);
        elseif(abs(stress(ie,3))<1e-16 && abs(stress(ie,2))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,stress(ie,2),0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
        fprintf(pFilB,'%12.3e%12.3e%12.3e\n\n',0.0,0.0,0.0);
    end
else
    fprintf(pFilB,'\nVECTORS gradient float\n');
    for ie=1:length(ELEM)
        fprintf(pFilB,'%12.3e%12.3e%12.3e\n',stress(ie,1),stress(ie,2),0.0);
    end
end
fprintf(pFilB,'\n');

%% Point data
fprintf(pFilB,'POINT_DATA %d\n',num_plot_nodes);
fprintf(pFilB,'VECTORS displacement float\n');
for in=1:PARAMS.num_bg_nod
    if(PARAMS.ndof==2)
        if(abs(disp(2*in-1))>1e-16 && abs(disp(2*in))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp(2*in-1),disp(2*in),0.0);
        elseif(abs(disp(2*in-1))>1e-16 && abs(disp(2*in))<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp(2*in-1),0.0,0.0);
        elseif(abs(disp(2*in-1))<1e-16 && abs(disp(2*in))>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,disp(2*in),0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
    elseif(PARAMS.ndof==1)
        fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp(in),0.0,0.0);
    end
end
for ie=1:length(cutElm)
    locNod = [ELEM(cutElm(ie)).nodes];
    % Get the shape functions
    xe = [NODE(locNod).X]; ye = [NODE(locNod).Y];
    Amat = [ 1 1 1; xe(1) xe(2) xe(3); ye(1) ye(2) ye(3)];
    % Get the vertices
    vert = unique(ELEM(cutElm(ie)).vertices);
    for iv=1:length(vert)
        % Evaluate the shape function at the vertex position
        Npar = Amat\[1 VERT(vert(iv)).X VERT(vert(iv)).Y]';
        disp_vert_X = 0.0; disp_vert_Y = 0.0;
        for in=1:3
            if(PARAMS.ndof==2)
                disp_vert_X = disp_vert_X + disp(2*locNod(in)-1)*Npar(in);
                disp_vert_Y = disp_vert_Y + disp(2*locNod(in))*Npar(in);
            elseif(PARAMS.ndof==1)
                disp_vert_X = disp_vert_X + disp(locNod(in))*Npar(in);
                disp_vert_Y = 0.0;
            end
        end
        if(abs(disp_vert_X)>1e-16 && abs(disp_vert_Y)>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp_vert_X,disp_vert_Y,0.0);
        elseif(abs(disp_vert_X)>1e-16 && abs(disp_vert_Y)<1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',disp_vert_X,0.0,0.0);
        elseif(abs(disp_vert_X)<1e-16 && abs(disp_vert_Y)>1e-16)
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,disp_vert_Y,0.0);
        else
            fprintf(pFilB,'%12.3e%12.3e%12.3e\n',0.0,0.0,0.0);
        end
    end 
end

fclose(pFilB);

if(PARAMS.plotInt)
    %%%%
    %%%% Interface Mesh
    %%%%
    plotFileInt = [PARAMS.plotPath PARAMS.plotFile '_int_'  num2str(PARAMS.iLoad) '.vtk'];
    pFilI = fopen(plotFileInt,'w','l');
    %% Header
    fprintf(pFilI,'# vtk DataFile Version 2.0\n');
    fprintf(pFilI,'Interface mesh generated by generateVTK.m\n');
    fprintf(pFilI,'ASCII\nDATASET UNSTRUCTURED_GRID\n\n');
    fprintf(pFilI,'POINTS %d float\n',num_int_nodes);
    segmentToPlot = zeros(2*length(cutElm),2);
    normalToPlot = zeros(2*length(cutElm),2);
    num_segment = 0;
    vertCount = 0;
    for ic=1:length(cutElm)
        locVert=unique(ELEM(cutElm(ic)).vertices);
        for iv=1:length(locVert)
            fprintf(pFilI,'%12.3e%12.3e%12.3e\n',VERT(locVert(iv)).X,VERT(locVert(iv)).Y,0.0);
        end
        for is=1:size(ELEM(cutElm(ic)).vertices,1)
            [~,locVertId] = intersect(locVert,ELEM(cutElm(ic)).vertices(is,:));
            segmentToPlot(num_segment+is,1:2) = vertCount+locVertId;
            normalToPlot(num_segment+is,1:2) = ELEM(cutElm(ic)).normals(is,1:2);
        end
        vertCount = vertCount+length(locVert);
        num_segment = num_segment + size(ELEM(cutElm(ic)).vertices,1);
    end
    segmentToPlot(num_segment+1:end,:)=[];
    fprintf(pFilI,'\nCELLS %d %d\n',num_segment,3*num_segment);
    for ic=1:num_segment
        fprintf(pFilI,'%10d%10d%10d\n',2,segmentToPlot(ic,1)-1,segmentToPlot(ic,2)-1);
    end
    fprintf(pFilB,'\nCELL_TYPES %d\n',num_segment);
    for ie=1:num_segment
        fprintf(pFilB,'%4d\n',3);
    end
    fprintf(pFilB,'\n');
    %% Cell data
    fprintf(pFilI,'CELL_DATA %d\n',num_segment);
    fprintf(pFilB,'VECTORS normal float\n');
    for ic=1:num_segment
        fprintf(pFilI,'%12.3e%12.3e%12.3e\n',normalToPlot(ic,1),normalToPlot(ic,2),0.0);
    end
    fprintf(pFilB,'\n');
    fclose(pFilI);
end
