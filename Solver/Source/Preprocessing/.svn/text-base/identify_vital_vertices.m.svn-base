function[NODE,ELEM,VERT,PARAMS] = identify_vital_vertices(NODE,ELEM,VERT,PARAMS,cut_edge_conn)

end_pt = find([NODE(1:PARAMS.num_bg_nod).endPt]==1);

ep_to_vert=zeros(length(end_pt),1);
vert_to_ep = zeros(length(VERT),1);
next_ep = ones(length(VERT),1);
%%%%%%%%%% Check for end point to vertices map %%%%%%%%%%%%%%%
for ep=1:length(end_pt)
    k=0;
    for n_row = 1:2
        set = find(cut_edge_conn(n_row,:)==end_pt(ep));
        if(set>0)
            for i=1:size(set,2)
                k=k+1;
                ep_to_vert(ep,k) = set(1,i);
                vert_to_ep(set(1,i),next_ep(set(1,i))) = ep;
                next_ep(set(1,i)) = next_ep(set(1,i))+1;
            end
        end
    end
end
vert_to_vert=zeros(length(VERT),1);
%%%%% Identify vertex to vertex connectivity %%%%%%%%%%
for v=1:length(VERT)
    for vert_col =1:size(vert_to_ep,2)
        if(vert_to_ep(v,vert_col)~=0)
            ep_row = vert_to_ep(v,vert_col);
            for ep_col=1:size(ep_to_vert,2)
                if(ep_to_vert(ep_row,ep_col)~=0 && ep_to_vert(ep_row,ep_col)~=v)
                    vert_to_vert(v,1) = vert_to_vert(v,1)+1;
                    vert_to_vert(v,2) = v;
                    vert_to_vert(v,vert_to_vert(v,1)+2) = ep_to_vert(ep_row,ep_col);
                end
            end
        end
    end
end

vert_to_vert = sortrows(vert_to_vert);

%%%%%%%% Identify vital vertices %%%%%%%%%%%%
VERT(vert_to_vert(1,2)).vital = 1;
vital_vertices(1) = vert_to_vert(1,2);

for n_row=2:size(vert_to_vert)
    vv_flag=1;
    for n_col=1:vert_to_vert(n_row,1)
        v_flag=1;
        set = find(vert_to_vert(n_row,n_col+2)==vital_vertices);
        if(set>0)
            v_flag=0;
        end
        if(v_flag==0)
            vv_flag=0;
        end
    end
    if(vv_flag==1)
        vital_vertices(end+1) = vert_to_vert(n_row,2);
        VERT(vert_to_vert(n_row,2)).vital = 1;
    else
        VERT(vert_to_vert(n_row,2)).vital = 0;
    end
end
vital_vertices = sort(vital_vertices);

%%%%%%%% Get end points to vital vertices %%%%%%%%%%%%%
ep_to_vv = zeros(length(end_pt),1);
for nrow=1:size(ep_to_vert)
    k=0;
    for vv=1:size(vital_vertices,2)
        set = find(ep_to_vert(nrow,:)==vital_vertices(vv));
        if(set>0)
            k=k+1;
            ep_to_vv(nrow,k) = ep_to_vert(nrow,set);
            [NODE(end_pt(nrow)).vvId] = ep_to_vert(nrow,set);
	    children = NODE(end_pt(nrow)).childrenId;
            [NODE(children).vvId] = ep_to_vert(nrow,set);
        end
    end
end

nlink = 3;
% sum_num_vv_e is the sum of num_vv_e for all element e.
% num_vv_e is the number of vital vertices which support is defined over element e.
for e=1:length(ELEM)
    if(~isempty(ELEM(e).vertices))
        loc_conn = ELEM(e).nodes;
        for inod=1:nlink
	    ep_set = [end_pt [NODE(end_pt).childrenId]];
	    local_ep = find(ep_set == loc_conn(inod));
            if(~isempty(local_ep))
                ep = ep_set(local_ep);
                if(~isempty(NODE(ep).vvId))
                    ELEM(e).activEP = [ELEM(e).activEP ep];
                    old_local_vv = find(ELEM(e).localVV == NODE(ep).vvId, 1);
                    if(isempty(old_local_vv))
                        ELEM(e).localVV = [ELEM(e).localVV NODE(ep).vvId];
                    end
                end
            end
        end
        PARAMS.sum_num_vv_e = PARAMS.sum_num_vv_e + length(ELEM(e).localVV);
    end
end
